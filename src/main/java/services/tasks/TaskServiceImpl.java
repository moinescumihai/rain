package services.tasks;import model.domain.Persoana;import model.domain.Proiect;import model.domain.StatusTask;import model.domain.Task;import model.forms.TaskFormModel;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import services.ProjectsService;import services.ResurseUmaneService;import services.repository.StatusTaskRepository;import services.repository.TaskRepository;import java.util.List;@Servicepublic class TaskServiceImpl implements TaskService {    private static final Logger LOGGER = LoggerFactory.getLogger(TaskServiceImpl.class);    @Autowired    private StatusTaskRepository statusTaskRepository;    @Autowired    private ProjectsService projectsService;    @Autowired    private TaskRepository taskRepository;    @Autowired    private ResurseUmaneService resurseUmaneService;    @Override    public List<StatusTask> getAllStatusTask() {        return (List<StatusTask>) statusTaskRepository.findAll();    }    @Override    public List<Task> getAllTasks() {        return (List<Task>) taskRepository.findAll();    }    @Override    public List<Task> getCurrentTasks() {        return taskRepository.findAllByCompletAndDeleted(0, 0);    }    @Override    public List<Task> getTasksForProject(Proiect proiect) {        return taskRepository.findAllByIdProiectEquals(proiect);    }    @Override    public List<Task> getTasksForProject(long idProiect) {        return getTasksForProject(projectsService.findOne(idProiect));    }    @Override    public List<Task> getCurrentTasksForProject(Proiect proiect) {        return taskRepository.findAllByIdProiectAndCompletAndDeleted(proiect, 0, 0);    }    @Override    public List<Task> getCurrentTasksForProject(long idProiect) {        return getCurrentTasksForProject(projectsService.findOne(idProiect));    }    @Override    public List<Task> getTasksForUser(Persoana idPersoana) {        return taskRepository.findAllByAssigneeEquals(idPersoana);    }    @Override    public List<Task> getTasksForUser(long idPersoana) {        return getTasksForUser(resurseUmaneService.findOne(idPersoana));    }    @Override    public List<Task> getCurrentTasksForUser(Persoana idPersoana) {        return taskRepository.findAllByAssigneeAndCompletAndDeleted(idPersoana, 0, 0);    }    @Override    public List<Task> getCurrentTasksForUser(long idPersoana) {        return getCurrentTasksForUser(resurseUmaneService.findOne(idPersoana));    }    @Override    public List<Task> getCurrentTasksForUser(String username) {        return getCurrentTasksForUser(resurseUmaneService.findOne(resurseUmaneService.findByUsername(username).getIdPersoana()));    }    @Override    public Task getTaskById(long idTask) {        return taskRepository.findOne(idTask);    }    @Override    @Transactional    public boolean updateTask(TaskFormModel model) {        Task task = new Task();        task.setIdTask(model.getIdTask());        task.setDescriere(model.getDescriere());        task.setIdProiect(projectsService.findOne(model.getIdProiect()));        task.setAssignee(resurseUmaneService.findOne(model.getAssignee()));        task.setReporter(resurseUmaneService.findOne(model.getReporter()));        task.setIdStatusTask(statusTaskRepository.findOne(model.getIdStatusTask()));        task.setNume(model.getNume());        task.setEstimare(model.getEstimare());        task.setComplet(model.getComplet());        task.setDeleted(model.getDeleted());        return taskRepository.save(task) != null;    }    @Override    public Task updateTask(Task model) {        return taskRepository.save(model);    }    @Override    @Transactional    public Task addTask(TaskFormModel model) {        Task task = new Task();        task.setNume(model.getNume());        task.setEstimare(model.getEstimare());        task.setDescriere(model.getDescriere());        task.setIdProiect(projectsService.findOne(model.getIdProiect()));        task.setIdStatusTask(statusTaskRepository.findOne(1L));        task.setCod(task.getIdProiect().getCodroiect() + "-" + (taskRepository.findAllByIdProiectEquals(projectsService.findOne(model.getIdProiect())).size() + 1));        task.setAssignee(resurseUmaneService.findOne(model.getAssignee()));        task.setReporter(resurseUmaneService.findOne(model.getReporter()));        return taskRepository.save(task);    }}