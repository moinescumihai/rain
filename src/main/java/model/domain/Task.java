package model.domain;import javax.persistence.*;@Entity@Table(name = "task", schema = "", catalog = "raindrop")public class Task extends BaseEntity {    private long idTask;    private String nume;    private String descriere;    private int complet;    private int deleted;    private int ordine;    private ResurseUmane idResurseUmane;    private Proiect idProiect;    private long estimare;    private StatusTask idStatusTask;    @Id    @GeneratedValue(strategy = GenerationType.IDENTITY)    @Column(name = "id_task")    public long getIdTask() {        return idTask;    }    public void setIdTask(long idTask) {        this.idTask = idTask;    }    @Basic    @Column(name = "nume", nullable = false, insertable = true, updatable = true)    public String getNume() {        return nume;    }    public void setNume(String nume) {        this.nume = nume;    }    @Basic    @Column(name = "descriere", nullable = false, insertable = true, updatable = true)    public String getDescriere() {        return descriere;    }    public void setDescriere(String descriere) {        this.descriere = descriere;    }    @Basic    @Column(name = "complet", nullable = false, insertable = true, updatable = true)    public int getComplet() {        return complet;    }    public void setComplet(int complet) {        this.complet = complet;    }    @Basic    @Column(name = "deleted", nullable = false, insertable = true, updatable = true)    public int getDeleted() {        return deleted;    }    public void setDeleted(int deleted) {        this.deleted = deleted;    }    @ManyToOne(fetch = FetchType.EAGER)    @JoinColumn(name = "id_resurse_umane")    public ResurseUmane getIdResurseUmane() {        return idResurseUmane;    }    public void setIdResurseUmane(ResurseUmane idResurseUmane) {        this.idResurseUmane = idResurseUmane;    }    @ManyToOne(fetch = FetchType.EAGER)    @JoinColumn(name = "id_proiect")    public Proiect getIdProiect() {        return idProiect;    }    public void setIdProiect(Proiect idProiect) {        this.idProiect = idProiect;    }    @Basic    @Column(name = "estimare", nullable = false, insertable = true, updatable = true)    public long getEstimare() {        return estimare;    }    public void setEstimare(long estimare) {        this.estimare = estimare;    }    @ManyToOne(fetch = FetchType.EAGER)    @JoinColumn(name = "id_status_task")    public StatusTask getIdStatusTask() {        return idStatusTask;    }    public void setIdStatusTask(StatusTask idStatusTask) {        this.idStatusTask = idStatusTask;    }    @Basic    @Column(name = "ordine", nullable = false, insertable = true, updatable = true)    public int getOrdine() {        return ordine;    }    public void setOrdine(int ordine) {        this.ordine = ordine;    }    @Override    public boolean equals(Object o) {        if (this == o) return true;        if (!(o instanceof Task)) return false;        Task task = (Task) o;        if (idTask != task.idTask) return false;        if (complet != task.complet) return false;        if (deleted != task.deleted) return false;        if (ordine != task.ordine) return false;        if (estimare != task.estimare) return false;        if (nume != null ? !nume.equals(task.nume) : task.nume != null) return false;        if (descriere != null ? !descriere.equals(task.descriere) : task.descriere != null) return false;        if (idResurseUmane != null ? !idResurseUmane.equals(task.idResurseUmane) : task.idResurseUmane != null) return false;        if (idProiect != null ? !idProiect.equals(task.idProiect) : task.idProiect != null) return false;        return !(idStatusTask != null ? !idStatusTask.equals(task.idStatusTask) : task.idStatusTask != null);    }    @Override    public int hashCode() {        int result = (int) (idTask ^ (idTask >>> 32));        result = 31 * result + (nume != null ? nume.hashCode() : 0);        result = 31 * result + (descriere != null ? descriere.hashCode() : 0);        result = 31 * result + complet;        result = 31 * result + deleted;        result = 31 * result + ordine;        result = 31 * result + (idResurseUmane != null ? idResurseUmane.hashCode() : 0);        result = 31 * result + (idProiect != null ? idProiect.hashCode() : 0);        result = 31 * result + (int) (estimare ^ (estimare >>> 32));        result = 31 * result + (idStatusTask != null ? idStatusTask.hashCode() : 0);        return result;    }}