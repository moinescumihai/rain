var fileTree;var fileDisplay = $('#file-display');var fileBreadcrumb = $('#file-breadcrumb');var rMenu;var faFiles;var morphBreadcrumb = (function () {    var breadcrumbData = ['Acas&abreve;'];    return function (path) {        var allPaths = $(fileBreadcrumb.find('a'));        var deleteIndex;        var composedPaths = path.split('/');        if (path === breadcrumbData[0]) {            breadcrumbData.splice(1);        } else {            $.each(allPaths, function (index, breadcrumbPath) {                if ($(breadcrumbPath).data('path') === path && $.inArray(composedPaths[composedPaths.length - 1], breadcrumbData) !== -1) {                    deleteIndex = index;                    breadcrumbData.splice(index + 1);                    return false;                } else {                    $.each(composedPaths, function (index, individualPath) {                        if ($.inArray(individualPath, breadcrumbData) === -1) {                            breadcrumbData.push(individualPath);                        }                    });                }            });        }        $.each(breadcrumbData, function (index, breadcrumb) {            if (index === 0) {                fileBreadcrumb.html('<li><i class="fa fa-home"></i> <a id="file-home" class="active">' + breadcrumb + '</a></li>');            } else if (index === breadcrumbData.length - 1) {                fileBreadcrumb.append('<li class="active">' + breadcrumb + '</li>');            } else {                fileBreadcrumb.append('<li><a data-path="' + breadcrumb + '" class="breadcrumb-folder">' + breadcrumb + '</a></li>')            }        });    };})();var loadFolderContents = function (path, id) {    if (!id) {        $.ajax({            type: 'get',            url: '/app/secure/files/get-folder/' + path,            contentType: "application/json",            async: false,            success: function (response) {                id = response;            }        });    }    $.ajax({        type: 'get',        url: '/app/secure/files/list-files?id=' + id,        contentType: "application/json",        success: function (files) {            morphBreadcrumb(path);            displayFiles(files);        },        error: function (e) {            showNotification("Eroare. Re&icirc;nc&abreve;rca&#539;i pagina." + e.message, "Eroare", DANGER);        }    });};var loadTopLevelFiles = function () {    $.ajax({        type: 'get',        url: '/app/secure/files/list-files',        contentType: "application/json",        success: function (files) {            morphBreadcrumb('Acas&abreve;');            displayFiles(files);        },        error: function (e) {            showNotification("Eroare. Re&icirc;nc&abreve;rca&#539;i pagina." + e.message, "Eroare", DANGER);        }    });};var computeExtension = (function () {    var memory = [];    var search = function (fileName) {        var extension = /(?:\.([^.]+))?$/.exec(fileName)[1];        if (typeof extension === 'undefined') {            extension = EMPTY;        }        extension = extension.toLowerCase();        var icon = memory[extension];        if (typeof icon !== 'string') {            $.each(faFiles.files[0], function (index, fileType) {                $.each(fileType.extensions, function (index, fileExtension) {                    if (fileExtension === extension) {                        icon = fileType.icon;                    }                })            });            memory[extension] = icon;        }        return icon;    };    return search;}());var humanReadableSize = function (sizeInBytes) {    var readableSize;    if (sizeInBytes <= 0) {        readableSize = '�';    } else if (sizeInBytes < 1024) {        readableSize = sizeInBytes + ' B';    } else if (sizeInBytes < 1048576) {        readableSize = +(sizeInBytes / 1024).toFixed(2) + ' KB';    } else if (sizeInBytes < 1073741824) {        readableSize = +(sizeInBytes / 1048576).toFixed(2) + ' MB';    } else {        readableSize = +(sizeInBytes / 1073741824).toFixed(2) + ' GB'    }    return readableSize;};var displayFiles = function (files) {    var ultimaAccesare,        ultimaModificare,        fileName,        icon,        isFolder,        id;    fileDisplay.html(EMPTY);    $.each(files, function (index, file) {        fileName = file.originalFileName;        ultimaAccesare = file.accesatLa ? toJSDateTime(file.accesatLa) : '�';        ultimaModificare = file.modificatLa !== null ? toJSDateTime(file.modificatLa) : toJSDateTime(file.creatLa);        isFolder = file.isDirectory;        id = file.idAttachment;        if (isFolder) {            icon = faFiles.folder;        } else {            icon = computeExtension(fileName);        }        fileDisplay.append(            '<tr><td align="center">'            + (index + 1)            + ' </td><td align="left">'            + '<i class="fa fa-fw ' + icon + '"></i>  <a data-id="' + id + '" data-is-folder="' + isFolder + '" data-path="' + file.path + '" class="clickable-file">' + fileName + '</a>'            + '</td><td align="right">' + humanReadableSize(file.size)            + '<td align="right">' + ultimaAccesare + '</td>'            + '<td align="right">' + ultimaModificare + '</td>'            + '</td></tr>');    });};var displayTreeFolder = function (event, treeId, treeNode, clickFlag) {    if (treeNode.isDirectory) {        morphBreadcrumb(treeNode.path);        displayFiles(treeNode.children);    }};var contextMenu = function (event, treeId, treeNode) {    if (!treeNode && event.target.tagName.toLowerCase() !== "button" && $(event.target).parents("a").length === 0) {        fileTree.cancelSelectedNode();        showRMenu("root", event.pageX, event.pageY - 55);    } else if (treeNode) {        fileTree.selectNode(treeNode);        showRMenu("node", event.pageX, event.pageY - 55);    }};var showRMenu = function (type, x, y) {    if (type == "root") {        $("#m_del").hide();        $("#m_edit").hide();    } else {        $("#m_del").show();        $("#m_edit").show();    }    rMenu.css({"top": y + "px", "left": x + "px"});    $("#rMenu").fadeIn(80);    $(document).bind("mousedown", onBodyMouseDown);};var hideRMenu = function () {    if (rMenu) {        rMenu.fadeOut(40);    }    $(document).unbind("mousedown", onBodyMouseDown);};var onBodyMouseDown = function (event) {    if (!(event.target.id === "rMenu" || $(event.target).parents("#rMenu").length > 0)) {        rMenu.css({"display": "none"});    }};var removeTreeNode = function () {    hideRMenu();    var nodes = fileTree.getSelectedNodes();    if (nodes && nodes.length > 0) {        if (nodes[0].children && nodes[0].children.length > 0) {            var msg = "If you delete this node will be deleted along with sub-nodes. \n\nPlease confirm!";            if (confirm(msg) == true) {                fileTree.removeNode(nodes[0]);            }        } else {            fileTree.removeNode(nodes[0]);        }    }};var editTreeNode = function () {    hideRMenu();    var nodes = fileTree.getSelectedNodes();    if (nodes && nodes.length > 0) {        fileTree.editName(nodes[0]);    }};var treeSettings = {    view: {        expandSpeed: EMPTY,        selectedMulti: false    },    async: {        enable: true,        type: 'get',        url: '/app/secure/files/list-files',        autoParam: ['id']    },    data: {        keep: {            leaf: true,            parent: true        },        key: {            name: 'originalFileName',            url: "path",            id: 'idAttachment',            isParent: 'isDirectory'        }    },    edit: {        enable: true,        nameIsHTML: true,        editNameSelectAll: true,        showRemoveBtn: false,        showRenameBtn: false    },    callback: {        onClick: displayTreeFolder,        onRightClick: contextMenu,        dataFilter: computeExtension,        onAsyncSuccess: function () {            $('.bubblingG').hide();        }    }};$(document).ready(function () {    $('#files').addClass('active');    $.getJSON('/js/static/fa-files.json', function (data) {        faFiles = data;    });    $('.tree-wrapper .panel-body').css('height', $(document).height() - 150);    $('.bubblingG').show();    rMenu = $('#rMenu');    fileTree = $.fn.zTree.init($('#file-tree'), treeSettings);    loadTopLevelFiles();    $(document).on('click', '#file-home', function () {        loadTopLevelFiles();    });    $(document).on('click', '.breadcrumb-folder', function () {        var file = $(this);        var id = file.data('id');        var path = file.data('path');        loadFolderContents(path, id);        event.preventDefault();    });    $(document).on('dblclick', '.clickable-file', function (event) {        var file = $(this);        var isFolder = file.data('is-folder');        var id = file.data('id');        var path = file.data('path');        if (isFolder) {            loadFolderContents(path, id);            event.preventDefault();        }    });});